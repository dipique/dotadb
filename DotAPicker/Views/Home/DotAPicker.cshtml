@using DotAPicker.Models
@model IEnumerable<Hero>

@{
    ViewBag.Title = "Heros";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var signedIn = ((User)Session["user"])?.IsAuthenticated == true;
}

<link href="~/Content/chosen.css" rel="stylesheet" />
<link href="~/Content/filter-table.css" rel="stylesheet" />
<script src="~/Scripts/chosen.jquery.js"></script>
<script src="~/Scripts/filter-table.js"></script>

<div class="container-fluid" style="min-width: 1366px; margin-left: 20px;">
    <div class="row">
        @*Title*@
        <div class="col-xs-4">
            <h1>Heroes</h1>
        </div>
    </div>
    <div class="row">
        @*Filter section*@
        <div class="col-xs-5">
            <div class="row">
                <div class="col-xs-6" style="min-width: 200px; max-width: 200px">
                    <input class="text-search" type="text" id="nameFilter" placeholder="Search by hero name..." />
                </div>
                <div class="col-xs-1" style="min-width: 50px; max-width: 50px"></div>
                <div class="col-xs-3" style="min-width: 200px; max-width: 200px">
                    <select multiple data-placeholder="Search by hero preference" id="typeFilter" onchange="filterFunctionAfterArrayUpdate()">
                        @foreach (string option in Enum.GetNames(typeof(HeroPreference)))
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-4" style="min-width: 440px; max-width: 440px"><h4>Hero List</h4></div>
        <div class="col-xs-4 detail-column"><h4>Allies</h4></div>
        <div class="col-xs-4 detail-column"><h4>Enemies</h4></div>
    </div>
    <div class="row">
        <div class="col-xs-4" style="min-width: 440px; max-width: 440px"> @*Hero options table*@
            <div class="scrolling-container">
                <div class="header-scrolling-container">
                    <div class="header-cell" style="min-width: 175px">Name</div>
                    <div class="header-cell" style="display:none">Alt Names</div>
                    <div class="header-cell">Preference</div>
                    <div class="header-cell" style="min-width: 140px">Add to...</div>
                </div>
                <div class="data-scrolling-container" id="filterTable">
                    @foreach (var hero in Model)
                    {
                        <div class="data-row" id="@hero.Id">
                            <div class="data-row-cell" style="min-width: 175px" id="heroName">@hero.Name</div>
                            <div class="data-row-cell" style="display:none" id="nameValue">@hero.NameSet</div>
                            <div class="data-row-cell" id="typeValue">
                                @if (signedIn)
                                {
                                    @Html.DropDownList("heroPref", @hero.Preference.AsSelectList(), new { id = hero.Id, @class = "hero-pref" })
                                }
                                else
                                {
                                    @hero.Preference
                                }
                            </div>
                            <div class="data-row-cell" id="addTo" style="min-width: 140px">
                                <a href="" class="add-ally" id="@hero.Id">(allies)</a> <a href="" class="add-enemy" id="@hero.Id">(enemies)</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-xs-4">
            @*Ally Section*@
            <div class="allyDetails detail-column" id="allyDetails">
                <div class="allyDetail" id="ad1"></div>
                <div class="allyDetail" id="ad2"></div>
                <div class="allyDetail" id="ad3"></div>
                <div class="allyDetail" id="ad4"></div>
                <div class="allyDetail" id="ad5"></div>
            </div>
        </div>
        <div class="col-xs-4">
            @*Enemy Section*@
            <div class="enemyDetails detail-column" id="enemyDetails">
                <div class="enemyDetail" id="ed1"></div>
                <div class="enemyDetail" id="ed2"></div>
                <div class="enemyDetail" id="ed3"></div>
                <div class="enemyDetail" id="ed4"></div>
                <div class="enemyDetail" id="ed5"></div>
            </div>
        </div>
    </div>
</div>

<script>
    $("#filterPreference").chosen({
        width: "300px"
    });

    var allyArray = [-1, -1, -1, -1, -1];
    var enemyArray = [-1, -1, -1, -1, -1];
    var chosenArray = [];

    function updateChosenArray() {
        var chosenSet = new Set();
        allyArray.forEach(function (value) {
            if (value > -1) {
                chosenSet.add(value)
            }            
        });
        enemyArray.forEach(function (value) {
            if (value > -1) {
                chosenSet.add(value)
            }
        });
        chosenArray = Array.from(chosenSet);
    }

    function filterFunctionAfterArrayUpdate() {
        updateChosenArray();
        filterFunction();
    }


    //Register keyboard events
    $('#nameFilter').keyup(function (e) {
        //alert(e.keyCode);
        //if enter is pressed
        if (e.keyCode == 13) {
            //and there is only one visible hero
            if (countVisibleItems() == 1) {
                //if shift key is pressed (meaning ally add)
                if (e.shiftKey) {
                    //if there's at least one open slot for an ally
                    if (nextAllyIndex() != -1) {
                        //if there's a valid hero ID selected
                        var i = firstVisibleItemIndex();
                        if (i != -1) {
                            //Add to the list of allies
                            addAlly(i);
                        }
                    }
                } else {  //Add to enemies
                    //if there's at least one open slot for an enemy
                    if (nextEnemyIndex() != -1) {
                        //if there's a valid hero ID selected
                        var i = firstVisibleItemIndex();
                        if (i != -1) {
                            //Add to the list of enemies
                            addEnemy(i);
                        }
                    }

                }
            }
        } else {
            //if enter wasn't pushed, just filter the table
            filterFunctionAfterArrayUpdate();
        }
    });

    $("#typeFilter").chosen({
        width: "300px"
    });

    var filterSet = [ [
            "nameFilter",
            "text",
            "nameValue",
            "inner"
        ], [
            "typeFilter",
            "multi",
            "typeValue",
            "select"
        ], [
            "chosenArray",
            "row-index-exclusion",
            "row",
            "array"
        ]
    ];

    $(".add-ally").click(function () {
        addAlly(this.id);
        return false;
    });
    $(".add-enemy").click(function () {
        addEnemy(this.id);
        return false;
    });

    $("div").on("click", ".detail-remove", function () {
        //remove the details
        this.parentElement.parentElement.parentElement.innerHTML = "";

        //clear that element in the array so a new hero can be added
        var heroID = this.id;
        removeHeroFromArray(heroID);

        //refresh selection list to re-add the hero
        filterFunctionAfterArrayUpdate();

        //hide the detail columns if there are no more details to show
        if (noSelectedHeroes()) {
            $("div.detail-column").each(function () {
                this.style.display = "none";
            });
        }
    });

    function removeHeroFromArray(heroID)
    {
        for (var x = 0; x < 5; x++) {
            //check for matching ally index
            if (allyArray[x] == heroID) {
                allyArray[x] = -1;
                break;
            }

            //check for matching enemy index
            if (enemyArray[x] == heroID) {
                enemyArray[x] = -1;
                break;
            }
        }
    }

    function nextAllyIndex() {
        for (var x = 0; x < 5; x++) {
            if (allyArray[x] == -1) {
                return x;
            }
        }

        //if no indices are available...
        return -1;
    }

    function nextEnemyIndex() {
        for (var x = 0; x < 5; x++) {
            if (enemyArray[x] == -1) {
                return x;
            }
        }

        //if no indices are available...
        return -1;
    }

    function addAlly(id) {
        var index = nextAllyIndex();
        var selector = ".allyDetails #ad" + (index + 1);
        $(selector).load('@Url.Action("Detail", "Home")?id=' + id);
        allyArray[index] = id;

        //clear search and make sure it doesn't appear on the list anymore
        resetSearch();

        //make the section visible if it isn't currently
        $("div.detail-column").each(function () {
            this.style.display = "block";
        });
    }

    function addEnemy(id) {
        var index = nextEnemyIndex();
        var selector = ".enemyDetails #ed" + (index + 1);
        $(selector).load('@Url.Action("Detail", "Home")?id=' + id);
        enemyArray[index] = id;

        //clear search and make sure it doesn't appear on the list anymore
        resetSearch();

        //make the section visible if it isn't currently
        $("div.detail-column").each(function () {
            this.style.display = "block";
        });
    }

    function resetSearch() {
        //reset the hero search text
        $("#filterInput").val("");
        filterFunctionAfterArrayUpdate();

        //if keeping the preference means there aren't any results, reset it as well
        if (countVisibleItems() < 1 && getEl("filterPreference").selectedIndex >= 0) { //no heros, but preferences are chosen
            $("#filterPreference option").prop('selected', false).trigger('chosen:updated');
            filterFunctionAfterArrayUpdate();
        }
    }

    function noSelectedHeroes() {
        for (var x = 0; x < 5; x++) {
            if (enemyArray[x] != -1) {
                return false;
            }
        }

        for (var x = 0; x < 5; x++) {
            if (allyArray[x] != -1) {
                return false;
            }
        }

        return true;
    }

    $(".hero-pref").change(function () {
        $('.popdown-view').load('home/UpdatePreference?heroID=' + this.id + '&preference=' + this.options[this.selectedIndex].text);
    });
</script>
