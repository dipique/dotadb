@model DotAPicker.ViewModels.ImportLabelsViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="@Url.Content("~/Content/sliders.css")" rel="stylesheet" type="text/css" />

<h2>Import Labels</h2>

<p>
    I mean, this option is here, but it was mostly a dev tool. If you need it for some reason, it expects a tab-delimited text file. The column headers are the labels, and any entries below them are heroes to which the label will be applied.
</p>
<p>
    An easy way to generate this file is to put the data in Excel, then copy/paste the data into a text editor (like notepad); it will automatically paste as tab-delimited text.
</p>
<p>
    This will not overwrite your existing labels, will not create duplicates, and will ignore hero names that don't match an existing hero name. Also it skips blank and one-letter hero names, because that's not a thing.
</p>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.PostedFile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.PostedFile, new { type = "file", @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Import Labels" class="btn btn-default" />
                <br />
                <i>(this might take a minute)</i>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
