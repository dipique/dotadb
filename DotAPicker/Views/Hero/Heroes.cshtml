@using DotAPicker.Models
@model IEnumerable<Hero>

@{
    ViewBag.Title = "Heros";
    Layout = "~/Views/Shared/_Layout.cshtml";
    if (ViewBag.SelectedHeroID > 0)
    {

    }
    else
    {
        ViewBag.SelectedHeroID = Model.FirstOrDefault()?.Id ?? 0;
    }
}

<link href="~/Content/chosen.min.css" rel="stylesheet" />
<script src="~/Scripts/update-pref.js"></script>
<script src="~/Scripts/chosen.jquery.min.js"></script>
<script src="~/Scripts/filter-table.js"></script>



<div class="container-fluid" style="width: 1020px; min-width: 720px; margin-left: 20px;">
    <div class="row">
        <div class="col-xs-4">
            <h1>Heroes</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-5">
            <div class="row">
                <div class="col-xs-6">
                    <input type="text" id="filterInput" placeholder="Search by hero name..." />
                </div>
                <div class="col-xs-1"></div>
                <div class="col-xs-3">
                    <select multiple data-placeholder="Search by hero preference" id="filterPreference" onchange="filterFunction()">
                        @foreach (string option in Enum.GetNames(typeof(HeroPreference)))
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-5"><h4>Hero Options</h4></div>
        <div class="col-xs-7"><h4>Hero Details</h4></div>
    </div>
    <div class="row">
        <div class="col-xs-5">
            @*Hero options table*@
            <div class="scrolling-container">
                <div class="header-scrolling-container">
                    <div class="header-cell" style="min-width: 200px">Name</div>
                    <div class="header-cell" style="display:none">Alt Names</div>
                    <div class="header-cell">Preference</div>
                    <div class="header-cell">Actions</div>
                </div>
                <div class="data-scrolling-container" id="filterHeroTable">
                    @foreach (var hero in Model)
                    {
                        var rowClass = ViewBag.SelectedHeroID == hero.Id ? "data-row selected" : "data-row";
                        <div class="@rowClass" id="@hero.Id">
                            <div class="data-row-cell" style="min-width: 200px" id="heroName">@hero.Name</div>
                            <div class="data-row-cell" style="display:none" id="heroAltNames">@hero.AltNames</div>
                            <div class="data-row-cell" id="heroPreference">
                                @Html.DropDownList("heroPref", @hero.Preference.AsSelectList(), new { id = hero.Id, @class = "hero-pref", controller = "hero" })
                            </div>
                            <div class="data-row-cell" id="heroActions">@Html.ActionLink("(edit)", "Edit", new { id = hero.Id })</div>
                        </div>
                    }
                </div>
                <div class="no-data" style="display: none">
                    <div class="no-data-cell" style="min-width: 417px">No heros found</div>
                </div>
            </div>
        </div>
        <div class="col-xs-7">
            @*Hero detail section*@
            <div class="heroDetails"></div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <input id="newHeroBtn" type="button" value="New Hero" onclick="location.href='@Url.Action("Create")'" />
        </div>
    </div>

</div>

<script>
    //Keyboard shortcut for adding a new hero (Ctrl-Enter)
    document.addEventListener('keyup', keyUp, false);
    function keyUp(e) {
        if (e.ctrlKey && e.keyCode == 13) {
            $('#newHeroBtn').click();
        }
    }

    $("#filterPreference").chosen({
        width: "300px"
    });

    //Register keyboard events
    $('#filterInput').keyup(function () {
        filterFunction();
    });

    //Causes clicking a row to load the detail partial view
    $('.data-row').click(function () {
        $(this).addClass('selected').siblings().removeClass('selected');
        $('.heroDetails').load('@Url.Action("Detail", "Hero")?id=' + this.id);
    });

    //Make the first hero auto-load details
    $('.heroDetails').load('@Url.Action("Detail", "Hero")?id=' + @ViewBag.SelectedHeroID);

    $(".hero-pref").change(function () {
        heroPrefChange(this, "hero");
    });

</script>

