@using DotAPicker.Models
@using DotAPicker.ViewModels
@model TableViewModel<Hero>

@{
    ViewBag.Title = "Heros";
    Layout = "~/Views/Shared/_Layout.cshtml";
    if (ViewBag.SelectedHeroID > 0)
    {

    }
    else
    {
        ViewBag.SelectedHeroID = Model.Items.FirstOrDefault()?.Id ?? 0;
    }

    var signedIn = ((User)Session["user"])?.IsAuthenticated == true;
}

<link href="~/Content/chosen.css" rel="stylesheet" />
<script src="~/Scripts/chosen.jquery.js"></script>
<script src="~/Scripts/filter-table.js"></script>
<link href="~/Content/filter-table.css" rel="stylesheet" />


<div class="container-fluid" style="width: 1020px; min-width: 720px; margin-left: 20px;">
    <div class="row">
        <div class="col-xs-4">
            <h1>Heroes</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-5">
            <div class="row">
                <div class="col-xs-6">
                    <input class="text-search" type="text" id="nameFilter" placeholder="Search by hero name..." />
                </div>
                <div class="col-xs-1"></div>
                <div class="col-xs-3">
                    <select multiple data-placeholder="Search by hero preference" id="typeFilter" onchange="typeFilterChange()">
                        @foreach (string option in Enum.GetNames(typeof(HeroPreference)))
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-4">
            <h4 style="display:inline-block">Hero List</h4>
            @if (signedIn)
            {
                <div class="link-padding">
                    @Html.ActionLink("(new)", "Create", new { }, new { @class = "create-link", title = "New Hero" })
                </div>
            }
        </div>
        <div class="col-xs-7"><h4>Hero Details</h4></div>
    </div>
    <div class="row">
        <div class="col-xs-4">
            @{ 
                var viewModel = new TableConstructorViewModel<Hero>() {
                    SignedIn = signedIn,
                    Items = Model.Items,
                    Columns = new List<TableColumn<Hero>>() {
                        new TableColumn<Hero>(nameof(Hero.Name), minWidth: 200, valueID: "nameValue"),
                        new TableColumn<Hero>(nameof(Hero.NameSet), display: false),
                        new TableColumn<Hero>(nameof(Hero.Preference), minWidth: 110, valueID: "typeValue", dropDownSettings: new DropDownSettings() {
                            DropdownClass = "hero-pref",
                            RequiresSignIn = true
                        })
                    }
                };

                //Set the sort field, if applicable
                var sortColumn = viewModel.Columns.FirstOrDefault(c => c.Property.Name == Model.SortField);
                if (sortColumn != null)
                {
                    sortColumn.SortDirection = Model.SortDirection;
                }

                Html.RenderPartial("HeroTable", viewModel);
            }
        </div>
        <div class="col-xs-7">
            @*Hero detail section*@
            <div class="heroDetails"></div>
        </div>
    </div>
</div>

<script>
    $("#typeFilter").chosen({
        width: "300px"
    });

    function typeFilterChange() {
        filterFunction();
    }

    var auth = @signedIn.ToString().ToLower();
    var filterSet = [[
        "nameFilter",
        "text",
        "nameValue",
        "inner"
    ], [
        "typeFilter",
        "multi",
        "typeValue",
        auth == "true" ? "select" : "inner"
    ]
    ];

    //Register keyboard events
    $('#nameFilter').keyup(function (e) {
        if (e.keyCode == 13) { //enter
            if (countVisibleItems() == 1) {
                var heroRow = $("div.data-row#" + firstVisibleItemIndex())[0];
                selectRow(heroRow);
            }
        } else {
            filterFunction();
        }
    });

    //Causes clicking a row to load the detail partial view
    $('.data-row').click(function () {
        selectRow(this);
    });

    function selectRow(heroRow) {
        $(heroRow).addClass('selected').siblings().removeClass('selected');
        $('.heroDetails').load('@Url.Action("Detail", "Hero")?id=' + heroRow.id);
    }

    //Make the first hero auto-load details
    $('.heroDetails').load('@Url.Action("Detail", "Hero")?id=' + @ViewBag.SelectedHeroID);

    $(".hero-pref").change(function () {
        //Make the popdown appear on preference change, if applicable
        $('.popdown-view').load('hero/UpdatePreference?heroID=' + this.id + '&preference=' + this.options[this.selectedIndex].text);
    });

</script>

